Pattern Matching Anonymous Functions

有代码求真相：  scala> List(("a",1),("b",2)).map(case (x,y) => x + y)  <console>:1: error: illegal start of simple expression         List(("a",1),("b",2)).map(case (x,y) => x + y)                                   ^  scala> List(("a",1),("b",2)).map{case (x,y) => x + y}  res0: List[java.lang.String] = List(a1, b2)  scala> val func0: (Int, Int)=>Int = case (x, y)  <console>:1: error: illegal start of simple expression         val func0: (Int, Int)=>Int = case (x, y)                                     ^  scala> val func1: (Int, Int)=>Int = { case (x, y) => x + y }  func1: (Int, Int) => Int = <function2>  scala> func1(1, 2)  res1: Int = 3  scala> func1(1->2)  <console>:9: error: not enough arguments for method apply: (v1: Int, v2: Int)Int in trait Function2.  Unspecified value parameter v2.                func1(1->2)                     ^  scala> val func2: ((Int, Int))=>Int = { case (x, y) => x + y}  func2: (Int, Int) => Int = <function1>  scala>  func2(1, 2)  res3: Int = 3  scala> func2(1 -> 2)  res4: Int = 3  scala> List(1,2,3) map func2  <console>:9: error: type mismatch;   found   : (Int, Int) => Int   required: Int => ?                List(1,2,3) map func2                                ^  scala> val func3: (Int, Int, Int)=>Int = { case (x, y, z) => x + y + z}  func3: (Int, Int, Int) => Int = <function3>  scala> func3(1, 2, 2)  res6: Int = 5  scala> val func4: Pair[Int, Int] => Int = { case (x, y) => x + y }  func4: (Int, Int) => Int = <function1>  scala> func4(1, 2)  res7: Int = 3  scala> func4(1 -> 2)  res8: Int = 3  scala>  val func5: PartialFunction[(Int,Int), Int] = { case (x, y) => x + y }  func5: PartialFunction[(Int, Int),Int] = <function1>  scala> func5(1, 2)  res9: Int = 3  scala> func5(1 -> 2)  res10: Int = 3  scala> func5.isDefinedAt(100,10000)  res11: Boolean = true  scala> def test(list:List[(Int,Int)])(f:(Int,Int)=>Int) = list.map(it=> f(it._1,it._2))  test: (list: List[(Int, Int)])(f: (Int, Int) => Int)List[Int]  scala> test(List((1,2),(3,4))){      case (x,y) => x + y    }  res12: List[Int] = List(3, 7) 个人解毒:  1 case 表达式转换为函数    A 需要放入{},“case” statements be inside curly braces    B 转换成什么函数可根据上下文进行推断      函数参数列表是展开的还是合并在一个元组(单个参数);      根据上下文转PartialFunction 还是 FunctionN  2 Pair 是Tuple2的别名  3 1 -> 2 : -> 是一个隐式转换方法 (1->2) == (1, 2)应用：  Pattern Matching Anonymous Functions 应用在Scala库中随处可见,如Actor  import scala.actors._  import Actor._  val a = actor{    react{      case msg => println(msg)    }  }  a ! "hello"  还可以用于函数的组合计算，如  def goodNames(words:List[String])(f: String => Boolean):Int = {    words.count(f)  }  val f : PartialFunction[String,Boolean] = { case "itang" => true }  goodNames(List("itang","tom")){    f orElse {      case "tom" => true      case _ => false    }  }更多参考资料：本文代码