.NetFramework DBContext

#pragma warning disable 1591//------------------------------------------------------------------------------// <auto-generated>//     This code was generated by a tool.//     Runtime Version:4.0.30319.1////     Changes to this file may cause incorrect behavior and will be lost if//     the code is regenerated.// </auto-generated>//------------------------------------------------------------------------------namespace DBContextTest{        using System.Data.Linq;        using System.Data.Linq.Mapping;        using System.Data;        using System.Collections.Generic;        using System.Reflection;        using System.Linq;        using System.Linq.Expressions;        using System.ComponentModel;        using System;                        [global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MyQQ")]        public partial class DBDiegoDataContext : System.Data.Linq.DataContext        {                                private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();                    #region Extensibility Method Definitions    partial void OnCreated();    partial void InsertBloodType(BloodType instance);    partial void UpdateBloodType(BloodType instance);    partial void DeleteBloodType(BloodType instance);    partial void InsertUser(User instance);    partial void UpdateUser(User instance);    partial void DeleteUser(User instance);    partial void InsertFriend(Friend instance);    partial void UpdateFriend(Friend instance);    partial void DeleteFriend(Friend instance);    partial void InsertFriendshipPolicy(FriendshipPolicy instance);    partial void UpdateFriendshipPolicy(FriendshipPolicy instance);    partial void DeleteFriendshipPolicy(FriendshipPolicy instance);    partial void InsertMessage(Message instance);    partial void UpdateMessage(Message instance);    partial void DeleteMessage(Message instance);    partial void InsertMessageType(MessageType instance);    partial void UpdateMessageType(MessageType instance);    partial void DeleteMessageType(MessageType instance);    partial void InsertStar(Star instance);    partial void UpdateStar(Star instance);    partial void DeleteStar(Star instance);    #endregion                                public DBDiegoDataContext() :                                 base(global::DBContextTest.Properties.Settings.Default.MyQQConnectionString, mappingSource)                {                        OnCreated();                }                                public DBDiegoDataContext(string connection) :                                 base(connection, mappingSource)                {                        OnCreated();                }                                public DBDiegoDataContext(System.Data.IDbConnection connection) :                                 base(connection, mappingSource)                {                        OnCreated();                }                                public DBDiegoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :                                 base(connection, mappingSource)                {                        OnCreated();                }                                public DBDiegoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :                                 base(connection, mappingSource)                {                        OnCreated();                }                                public System.Data.Linq.Table<BloodType> BloodTypes                {                        get                        {                                return this.GetTable<BloodType>();                        }                }                                public System.Data.Linq.Table<User> Users                {                        get                        {                                return this.GetTable<User>();                        }                }                                public System.Data.Linq.Table<Friend> Friends                {                        get                        {                                return this.GetTable<Friend>();                        }                }                                public System.Data.Linq.Table<FriendshipPolicy> FriendshipPolicies                {                        get                        {                                return this.GetTable<FriendshipPolicy>();                        }                }                                public System.Data.Linq.Table<Message> Messages                {                        get                        {                                return this.GetTable<Message>();                        }                }                                public System.Data.Linq.Table<MessageType> MessageTypes                {                        get                        {                                return this.GetTable<MessageType>();                        }                }                                public System.Data.Linq.Table<Star> Stars                {                        get                        {                                return this.GetTable<Star>();                        }                }        }                [global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BloodType")]        public partial class BloodType : INotifyPropertyChanging, INotifyPropertyChanged        {                                private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);                                private int _Id;                                private string _BloodType1;                                private EntitySet<User> _Users;                    #region Extensibility Method Definitions    partial void OnLoaded();    partial void OnValidate(System.Data.Linq.ChangeAction action);    partial void OnCreated();    partial void OnIdChanging(int value);    partial void OnIdChanged();    partial void OnBloodType1Changing(string value);    partial void OnBloodType1Changed();    #endregion                                public BloodType()                {                        this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));                        OnCreated();                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]                public int Id                {                        get                        {                                return this._Id;                        }                        set                        {                                if ((this._Id != value))                                {                                        this.OnIdChanging(value);                                        this.SendPropertyChanging();                                        this._Id = value;                                        this.SendPropertyChanged("Id");                                        this.OnIdChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Name="BloodType", Storage="_BloodType1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]                public string BloodType1                {                        get                        {                                return this._BloodType1;                        }                        set                        {                                if ((this._BloodType1 != value))                                {                                        this.OnBloodType1Changing(value);                                        this.SendPropertyChanging();                                        this._BloodType1 = value;                                        this.SendPropertyChanged("BloodType1");                                        this.OnBloodType1Changed();                                }                        }                }                                [global::System.Data.Linq.Mapping.AssociationAttribute(Name="BloodType_User", Storage="_Users", ThisKey="Id", OtherKey="BloodTypeId")]                public EntitySet<User> Users                {                        get                        {                                return this._Users;                        }                        set                        {                                this._Users.Assign(value);                        }                }                                public event PropertyChangingEventHandler PropertyChanging;                                public event PropertyChangedEventHandler PropertyChanged;                                protected virtual void SendPropertyChanging()                {                        if ((this.PropertyChanging != null))                        {                                this.PropertyChanging(this, emptyChangingEventArgs);                        }                }                                protected virtual void SendPropertyChanged(String propertyName)                {                        if ((this.PropertyChanged != null))                        {                                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));                        }                }                                private void attach_Users(User entity)                {                        this.SendPropertyChanging();                        entity.BloodType = this;                }                                private void detach_Users(User entity)                {                        this.SendPropertyChanging();                        entity.BloodType = null;                }        }                [global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]        public partial class User : INotifyPropertyChanging, INotifyPropertyChanged        {                                private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);                                private int _Id;                                private string _LoginPwd;                                private int _UserState;                                private int _FriendshipPolicyId;                                private string _NickName;                                private System.Nullable<int> _FaceId;                                private string _Sex;                                private int _Age;                                private string _Name;                                private System.Nullable<int> _StarId;                                private System.Nullable<int> _BloodTypeId;                                private EntitySet<Friend> _Friends;                                private EntitySet<Friend> _Friends1;                                private EntitySet<Message> _Messages;                                private EntitySet<Message> _Messages1;                                private EntityRef<BloodType> _BloodType;                                private EntityRef<FriendshipPolicy> _FriendshipPolicy;                                private EntityRef<Star> _Star;                    #region Extensibility Method Definitions    partial void OnLoaded();    partial void OnValidate(System.Data.Linq.ChangeAction action);    partial void OnCreated();    partial void OnIdChanging(int value);    partial void OnIdChanged();    partial void OnLoginPwdChanging(string value);    partial void OnLoginPwdChanged();    partial void OnUserStateChanging(int value);    partial void OnUserStateChanged();    partial void OnFriendshipPolicyIdChanging(int value);    partial void OnFriendshipPolicyIdChanged();    partial void OnNickNameChanging(string value);    partial void OnNickNameChanged();    partial void OnFaceIdChanging(System.Nullable<int> value);    partial void OnFaceIdChanged();    partial void OnSexChanging(string value);    partial void OnSexChanged();    partial void OnAgeChanging(int value);    partial void OnAgeChanged();    partial void OnNameChanging(string value);    partial void OnNameChanged();    partial void OnStarIdChanging(System.Nullable<int> value);    partial void OnStarIdChanged();    partial void OnBloodTypeIdChanging(System.Nullable<int> value);    partial void OnBloodTypeIdChanged();    #endregion                                public User()                {                        this._Friends = new EntitySet<Friend>(new Action<Friend>(this.attach_Friends), new Action<Friend>(this.detach_Friends));                        this._Friends1 = new EntitySet<Friend>(new Action<Friend>(this.attach_Friends1), new Action<Friend>(this.detach_Friends1));                        this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));                        this._Messages1 = new EntitySet<Message>(new Action<Message>(this.attach_Messages1), new Action<Message>(this.detach_Messages1));                        this._BloodType = default(EntityRef<BloodType>);                        this._FriendshipPolicy = default(EntityRef<FriendshipPolicy>);                        this._Star = default(EntityRef<Star>);                        OnCreated();                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]                public int Id                {                        get                        {                                return this._Id;                        }                        set                        {                                if ((this._Id != value))                                {                                        this.OnIdChanging(value);                                        this.SendPropertyChanging();                                        this._Id = value;                                        this.SendPropertyChanged("Id");                                        this.OnIdChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginPwd", DbType="VarChar(50) NOT NULL", CanBeNull=false)]                public string LoginPwd                {                        get                        {                                return this._LoginPwd;                        }                        set                        {                                if ((this._LoginPwd != value))                                {                                        this.OnLoginPwdChanging(value);                                        this.SendPropertyChanging();                                        this._LoginPwd = value;                                        this.SendPropertyChanged("LoginPwd");                                        this.OnLoginPwdChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserState", DbType="Int NOT NULL")]                public int UserState                {                        get                        {                                return this._UserState;                        }                        set                        {                                if ((this._UserState != value))                                {                                        this.OnUserStateChanging(value);                                        this.SendPropertyChanging();                                        this._UserState = value;                                        this.SendPropertyChanged("UserState");                                        this.OnUserStateChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FriendshipPolicyId", DbType="Int NOT NULL")]                public int FriendshipPolicyId                {                        get                        {                                return this._FriendshipPolicyId;                        }                        set                        {                                if ((this._FriendshipPolicyId != value))                                {                                        if (this._FriendshipPolicy.HasLoadedOrAssignedValue)                                        {                                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();                                        }                                        this.OnFriendshipPolicyIdChanging(value);                                        this.SendPropertyChanging();                                        this._FriendshipPolicyId = value;                                        this.SendPropertyChanged("FriendshipPolicyId");                                        this.OnFriendshipPolicyIdChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NickName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]                public string NickName                {                        get                        {                                return this._NickName;                        }                        set                        {                                if ((this._NickName != value))                                {                                        this.OnNickNameChanging(value);                                        this.SendPropertyChanging();                                        this._NickName = value;                                        this.SendPropertyChanged("NickName");                                        this.OnNickNameChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaceId", DbType="Int")]                public System.Nullable<int> FaceId                {                        get                        {                                return this._FaceId;                        }                        set                        {                                if ((this._FaceId != value))                                {                                        this.OnFaceIdChanging(value);                                        this.SendPropertyChanging();                                        this._FaceId = value;                                        this.SendPropertyChanged("FaceId");                                        this.OnFaceIdChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="VarChar(50) NOT NULL", CanBeNull=false)]                public string Sex                {                        get                        {                                return this._Sex;                        }                        set                        {                                if ((this._Sex != value))                                {                                        this.OnSexChanging(value);                                        this.SendPropertyChanging();                                        this._Sex = value;                                        this.SendPropertyChanged("Sex");                                        this.OnSexChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int NOT NULL")]                public int Age                {                        get                        {                                return this._Age;                        }                        set                        {                                if ((this._Age != value))                                {                                        this.OnAgeChanging(value);                                        this.SendPropertyChanging();                                        this._Age = value;                                        this.SendPropertyChanged("Age");                                        this.OnAgeChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]                public string Name                {                        get                        {                                return this._Name;                        }                        set                        {                                if ((this._Name != value))                                {                                        this.OnNameChanging(value);                                        this.SendPropertyChanging();                                        this._Name = value;                                        this.SendPropertyChanged("Name");                                        this.OnNameChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StarId", DbType="Int")]                public System.Nullable<int> StarId                {                        get                        {                                return this._StarId;                        }                        set                        {                                if ((this._StarId != value))                                {                                        if (this._Star.HasLoadedOrAssignedValue)                                        {                                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();                                        }                                        this.OnStarIdChanging(value);                                        this.SendPropertyChanging();                                        this._StarId = value;                                        this.SendPropertyChanged("StarId");                                        this.OnStarIdChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BloodTypeId", DbType="Int")]                public System.Nullable<int> BloodTypeId                {                        get                        {                                return this._BloodTypeId;                        }                        set                        {                                if ((this._BloodTypeId != value))                                {                                        if (this._BloodType.HasLoadedOrAssignedValue)                                        {                                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();                                        }                                        this.OnBloodTypeIdChanging(value);                                        this.SendPropertyChanging();                                        this._BloodTypeId = value;                                        this.SendPropertyChanged("BloodTypeId");                                        this.OnBloodTypeIdChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend", Storage="_Friends", ThisKey="Id", OtherKey="FriendId")]                public EntitySet<Friend> Friends                {                        get                        {                                return this._Friends;                        }                        set                        {                                this._Friends.Assign(value);                        }                }                                [global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend1", Storage="_Friends1", ThisKey="Id", OtherKey="HostId")]                public EntitySet<Friend> Friends1                {                        get                        {                                return this._Friends1;                        }                        set                        {                                this._Friends1.Assign(value);                        }                }                                [global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_Messages", ThisKey="Id", OtherKey="FromUserId")]                public EntitySet<Message> Messages                {                        get                        {                                return this._Messages;                        }                        set                        {                                this._Messages.Assign(value);                        }                }                                [global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message1", Storage="_Messages1", ThisKey="Id", OtherKey="ToUserId")]                public EntitySet<Message> Messages1                {                        get                        {                                return this._Messages1;                        }                        set                        {                                this._Messages1.Assign(value);                        }                }                                [global::System.Data.Linq.Mapping.AssociationAttribute(Name="BloodType_User", Storage="_BloodType", ThisKey="BloodTypeId", OtherKey="Id", IsForeignKey=true)]                public BloodType BloodType                {                        get                        {                                return this._BloodType.Entity;                        }                        set                        {                                BloodType previousValue = this._BloodType.Entity;                                if (((previousValue != value)                                                         || (this._BloodType.HasLoadedOrAssignedValue == false)))                                {                                        this.SendPropertyChanging();                                        if ((previousValue != null))                                        {                                                this._BloodType.Entity = null;                                                previousValue.Users.Remove(this);                                        }                                        this._BloodType.Entity = value;                                        if ((value != null))                                        {                                                value.Users.Add(this);                                                this._BloodTypeId = value.Id;                                        }                                        else                                        {                                                this._BloodTypeId = default(Nullable<int>);                                        }                                        this.SendPropertyChanged("BloodType");                                }                        }                }                                [global::System.Data.Linq.Mapping.AssociationAttribute(Name="FriendshipPolicy_User", Storage="_FriendshipPolicy", ThisKey="FriendshipPolicyId", OtherKey="Id", IsForeignKey=true)]                public FriendshipPolicy FriendshipPolicy                {                        get                        {                                return this._FriendshipPolicy.Entity;                        }                        set                        {                                FriendshipPolicy previousValue = this._FriendshipPolicy.Entity;                                if (((previousValue != value)                                                         || (this._FriendshipPolicy.HasLoadedOrAssignedValue == false)))                                {                                        this.SendPropertyChanging();                                        if ((previousValue != null))                                        {                                                this._FriendshipPolicy.Entity = null;                                                previousValue.Users.Remove(this);                                        }                                        this._FriendshipPolicy.Entity = value;                                        if ((value != null))                                        {                                                value.Users.Add(this);                                                this._FriendshipPolicyId = value.Id;                                        }                                        else                                        {                                                this._FriendshipPolicyId = default(int);                                        }                                        this.SendPropertyChanged("FriendshipPolicy");                                }                        }                }                                [global::System.Data.Linq.Mapping.AssociationAttribute(Name="Star_User", Storage="_Star", ThisKey="StarId", OtherKey="id", IsForeignKey=true)]                public Star Star                {                        get                        {                                return this._Star.Entity;                        }                        set                        {                                Star previousValue = this._Star.Entity;                                if (((previousValue != value)                                                         || (this._Star.HasLoadedOrAssignedValue == false)))                                {                                        this.SendPropertyChanging();                                        if ((previousValue != null))                                        {                                                this._Star.Entity = null;                                                previousValue.Users.Remove(this);                                        }                                        this._Star.Entity = value;                                        if ((value != null))                                        {                                                value.Users.Add(this);                                                this._StarId = value.id;                                        }                                        else                                        {                                                this._StarId = default(Nullable<int>);                                        }                                        this.SendPropertyChanged("Star");                                }                        }                }                                public event PropertyChangingEventHandler PropertyChanging;                                public event PropertyChangedEventHandler PropertyChanged;                                protected virtual void SendPropertyChanging()                {                        if ((this.PropertyChanging != null))                        {                                this.PropertyChanging(this, emptyChangingEventArgs);                        }                }                                protected virtual void SendPropertyChanged(String propertyName)                {                        if ((this.PropertyChanged != null))                        {                                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));                        }                }                                private void attach_Friends(Friend entity)                {                        this.SendPropertyChanging();                        entity.User = this;                }                                private void detach_Friends(Friend entity)                {                        this.SendPropertyChanging();                        entity.User = null;                }                                private void attach_Friends1(Friend entity)                {                        this.SendPropertyChanging();                        entity.User1 = this;                }                                private void detach_Friends1(Friend entity)                {                        this.SendPropertyChanging();                        entity.User1 = null;                }                                private void attach_Messages(Message entity)                {                        this.SendPropertyChanging();                        entity.User = this;                }                                private void detach_Messages(Message entity)                {                        this.SendPropertyChanging();                        entity.User = null;                }                                private void attach_Messages1(Message entity)                {                        this.SendPropertyChanging();                        entity.User1 = this;                }                                private void detach_Messages1(Message entity)                {                        this.SendPropertyChanging();                        entity.User1 = null;                }        }                [global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Friends")]        public partial class Friend : INotifyPropertyChanging, INotifyPropertyChanged        {                                private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);                                private int _Id;                                private int _HostId;                                private int _FriendId;                                private EntityRef<User> _User;                                private EntityRef<User> _User1;                    #region Extensibility Method Definitions    partial void OnLoaded();    partial void OnValidate(System.Data.Linq.ChangeAction action);    partial void OnCreated();    partial void OnIdChanging(int value);    partial void OnIdChanged();    partial void OnHostIdChanging(int value);    partial void OnHostIdChanged();    partial void OnFriendIdChanging(int value);    partial void OnFriendIdChanged();    #endregion                                public Friend()                {                        this._User = default(EntityRef<User>);                        this._User1 = default(EntityRef<User>);                        OnCreated();                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]                public int Id                {                        get                        {                                return this._Id;                        }                        set                        {                                if ((this._Id != value))                                {                                        this.OnIdChanging(value);                                        this.SendPropertyChanging();                                        this._Id = value;                                        this.SendPropertyChanged("Id");                                        this.OnIdChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostId", DbType="Int NOT NULL")]                public int HostId                {                        get                        {                                return this._HostId;                        }                        set                        {                                if ((this._HostId != value))                                {                                        if (this._User1.HasLoadedOrAssignedValue)                                        {                                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();                                        }                                        this.OnHostIdChanging(value);                                        this.SendPropertyChanging();                                        this._HostId = value;                                        this.SendPropertyChanged("HostId");                                        this.OnHostIdChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FriendId", DbType="Int NOT NULL")]                public int FriendId                {                        get                        {                                return this._FriendId;                        }                        set                        {                                if ((this._FriendId != value))                                {                                        if (this._User.HasLoadedOrAssignedValue)                                        {                                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();                                        }                                        this.OnFriendIdChanging(value);                                        this.SendPropertyChanging();                                        this._FriendId = value;                                        this.SendPropertyChanged("FriendId");                                        this.OnFriendIdChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend", Storage="_User", ThisKey="FriendId", OtherKey="Id", IsForeignKey=true)]                public User User                {                        get                        {                                return this._User.Entity;                        }                        set                        {                                User previousValue = this._User.Entity;                                if (((previousValue != value)                                                         || (this._User.HasLoadedOrAssignedValue == false)))                                {                                        this.SendPropertyChanging();                                        if ((previousValue != null))                                        {                                                this._User.Entity = null;                                                previousValue.Friends.Remove(this);                                        }                                        this._User.Entity = value;                                        if ((value != null))                                        {                                                value.Friends.Add(this);                                                this._FriendId = value.Id;                                        }                                        else                                        {                                                this._FriendId = default(int);                                        }                                        this.SendPropertyChanged("User");                                }                        }                }                                [global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend1", Storage="_User1", ThisKey="HostId", OtherKey="Id", IsForeignKey=true)]                public User User1                {                        get                        {                                return this._User1.Entity;                        }                        set                        {                                User previousValue = this._User1.Entity;                                if (((previousValue != value)                                                         || (this._User1.HasLoadedOrAssignedValue == false)))                                {                                        this.SendPropertyChanging();                                        if ((previousValue != null))                                        {                                                this._User1.Entity = null;                                                previousValue.Friends1.Remove(this);                                        }                                        this._User1.Entity = value;                                        if ((value != null))                                        {                                                value.Friends1.Add(this);                                                this._HostId = value.Id;                                        }                                        else                                        {                                                this._HostId = default(int);                                        }                                        this.SendPropertyChanged("User1");                                }                        }                }                                public event PropertyChangingEventHandler PropertyChanging;                                public event PropertyChangedEventHandler PropertyChanged;                                protected virtual void SendPropertyChanging()                {                        if ((this.PropertyChanging != null))                        {                                this.PropertyChanging(this, emptyChangingEventArgs);                        }                }                                protected virtual void SendPropertyChanged(String propertyName)                {                        if ((this.PropertyChanged != null))                        {                                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));                        }                }        }                [global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FriendshipPolicy")]        public partial class FriendshipPolicy : INotifyPropertyChanging, INotifyPropertyChanged        {                                private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);                                private int _Id;                                private string _FriendshipPolicy1;                                private EntitySet<User> _Users;                    #region Extensibility Method Definitions    partial void OnLoaded();    partial void OnValidate(System.Data.Linq.ChangeAction action);    partial void OnCreated();    partial void OnIdChanging(int value);    partial void OnIdChanged();    partial void OnFriendshipPolicy1Changing(string value);    partial void OnFriendshipPolicy1Changed();    #endregion                                public FriendshipPolicy()                {                        this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));                        OnCreated();                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]                public int Id                {                        get                        {                                return this._Id;                        }                        set                        {                                if ((this._Id != value))                                {                                        this.OnIdChanging(value);                                        this.SendPropertyChanging();                                        this._Id = value;                                        this.SendPropertyChanged("Id");                                        this.OnIdChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Name="FriendshipPolicy", Storage="_FriendshipPolicy1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]                public string FriendshipPolicy1                {                        get                        {                                return this._FriendshipPolicy1;                        }                        set                        {                                if ((this._FriendshipPolicy1 != value))                                {                                        this.OnFriendshipPolicy1Changing(value);                                        this.SendPropertyChanging();                                        this._FriendshipPolicy1 = value;                                        this.SendPropertyChanged("FriendshipPolicy1");                                        this.OnFriendshipPolicy1Changed();                                }                        }                }                                [global::System.Data.Linq.Mapping.AssociationAttribute(Name="FriendshipPolicy_User", Storage="_Users", ThisKey="Id", OtherKey="FriendshipPolicyId")]                public EntitySet<User> Users                {                        get                        {                                return this._Users;                        }                        set                        {                                this._Users.Assign(value);                        }                }                                public event PropertyChangingEventHandler PropertyChanging;                                public event PropertyChangedEventHandler PropertyChanged;                                protected virtual void SendPropertyChanging()                {                        if ((this.PropertyChanging != null))                        {                                this.PropertyChanging(this, emptyChangingEventArgs);                        }                }                                protected virtual void SendPropertyChanged(String propertyName)                {                        if ((this.PropertyChanged != null))                        {                                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));                        }                }                                private void attach_Users(User entity)                {                        this.SendPropertyChanging();                        entity.FriendshipPolicy = this;                }                                private void detach_Users(User entity)                {                        this.SendPropertyChanging();                        entity.FriendshipPolicy = null;                }        }                [global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Messages")]        public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged        {                                private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);                                private int _Id;                                private int _FromUserId;                                private int _ToUserId;                                private string _Message1;                                private int _MessageTypeId;                                private int _MessageState;                                private System.DateTime _MessageTime;                                private EntityRef<User> _User;                                private EntityRef<User> _User1;                                private EntityRef<MessageType> _MessageType;                    #region Extensibility Method Definitions    partial void OnLoaded();    partial void OnValidate(System.Data.Linq.ChangeAction action);    partial void OnCreated();    partial void OnIdChanging(int value);    partial void OnIdChanged();    partial void OnFromUserIdChanging(int value);    partial void OnFromUserIdChanged();    partial void OnToUserIdChanging(int value);    partial void OnToUserIdChanged();    partial void OnMessage1Changing(string value);    partial void OnMessage1Changed();    partial void OnMessageTypeIdChanging(int value);    partial void OnMessageTypeIdChanged();    partial void OnMessageStateChanging(int value);    partial void OnMessageStateChanged();    partial void OnMessageTimeChanging(System.DateTime value);    partial void OnMessageTimeChanged();    #endregion                                public Message()                {                        this._User = default(EntityRef<User>);                        this._User1 = default(EntityRef<User>);                        this._MessageType = default(EntityRef<MessageType>);                        OnCreated();                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]                public int Id                {                        get                        {                                return this._Id;                        }                        set                        {                                if ((this._Id != value))                                {                                        this.OnIdChanging(value);                                        this.SendPropertyChanging();                                        this._Id = value;                                        this.SendPropertyChanged("Id");                                        this.OnIdChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromUserId", DbType="Int NOT NULL")]                public int FromUserId                {                        get                        {                                return this._FromUserId;                        }                        set                        {                                if ((this._FromUserId != value))                                {                                        if (this._User.HasLoadedOrAssignedValue)                                        {                                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();                                        }                                        this.OnFromUserIdChanging(value);                                        this.SendPropertyChanging();                                        this._FromUserId = value;                                        this.SendPropertyChanged("FromUserId");                                        this.OnFromUserIdChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToUserId", DbType="Int NOT NULL")]                public int ToUserId                {                        get                        {                                return this._ToUserId;                        }                        set                        {                                if ((this._ToUserId != value))                                {                                        if (this._User1.HasLoadedOrAssignedValue)                                        {                                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();                                        }                                        this.OnToUserIdChanging(value);                                        this.SendPropertyChanging();                                        this._ToUserId = value;                                        this.SendPropertyChanged("ToUserId");                                        this.OnToUserIdChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Name="Message", Storage="_Message1", DbType="VarChar(50)")]                public string Message1                {                        get                        {                                return this._Message1;                        }                        set                        {                                if ((this._Message1 != value))                                {                                        this.OnMessage1Changing(value);                                        this.SendPropertyChanging();                                        this._Message1 = value;                                        this.SendPropertyChanged("Message1");                                        this.OnMessage1Changed();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageTypeId", DbType="Int NOT NULL")]                public int MessageTypeId                {                        get                        {                                return this._MessageTypeId;                        }                        set                        {                                if ((this._MessageTypeId != value))                                {                                        if (this._MessageType.HasLoadedOrAssignedValue)                                        {                                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();                                        }                                        this.OnMessageTypeIdChanging(value);                                        this.SendPropertyChanging();                                        this._MessageTypeId = value;                                        this.SendPropertyChanged("MessageTypeId");                                        this.OnMessageTypeIdChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageState", DbType="Int NOT NULL")]                public int MessageState                {                        get                        {                                return this._MessageState;                        }                        set                        {                                if ((this._MessageState != value))                                {                                        this.OnMessageStateChanging(value);                                        this.SendPropertyChanging();                                        this._MessageState = value;                                        this.SendPropertyChanged("MessageState");                                        this.OnMessageStateChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageTime", DbType="DateTime NOT NULL")]                public System.DateTime MessageTime                {                        get                        {                                return this._MessageTime;                        }                        set                        {                                if ((this._MessageTime != value))                                {                                        this.OnMessageTimeChanging(value);                                        this.SendPropertyChanging();                                        this._MessageTime = value;                                        this.SendPropertyChanged("MessageTime");                                        this.OnMessageTimeChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_User", ThisKey="FromUserId", OtherKey="Id", IsForeignKey=true)]                public User User                {                        get                        {                                return this._User.Entity;                        }                        set                        {                                User previousValue = this._User.Entity;                                if (((previousValue != value)                                                         || (this._User.HasLoadedOrAssignedValue == false)))                                {                                        this.SendPropertyChanging();                                        if ((previousValue != null))                                        {                                                this._User.Entity = null;                                                previousValue.Messages.Remove(this);                                        }                                        this._User.Entity = value;                                        if ((value != null))                                        {                                                value.Messages.Add(this);                                                this._FromUserId = value.Id;                                        }                                        else                                        {                                                this._FromUserId = default(int);                                        }                                        this.SendPropertyChanged("User");                                }                        }                }                                [global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message1", Storage="_User1", ThisKey="ToUserId", OtherKey="Id", IsForeignKey=true)]                public User User1                {                        get                        {                                return this._User1.Entity;                        }                        set                        {                                User previousValue = this._User1.Entity;                                if (((previousValue != value)                                                         || (this._User1.HasLoadedOrAssignedValue == false)))                                {                                        this.SendPropertyChanging();                                        if ((previousValue != null))                                        {                                                this._User1.Entity = null;                                                previousValue.Messages1.Remove(this);                                        }                                        this._User1.Entity = value;                                        if ((value != null))                                        {                                                value.Messages1.Add(this);                                                this._ToUserId = value.Id;                                        }                                        else                                        {                                                this._ToUserId = default(int);                                        }                                        this.SendPropertyChanged("User1");                                }                        }                }                                [global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageType_Message", Storage="_MessageType", ThisKey="MessageTypeId", OtherKey="Id", IsForeignKey=true)]                public MessageType MessageType                {                        get                        {                                return this._MessageType.Entity;                        }                        set                        {                                MessageType previousValue = this._MessageType.Entity;                                if (((previousValue != value)                                                         || (this._MessageType.HasLoadedOrAssignedValue == false)))                                {                                        this.SendPropertyChanging();                                        if ((previousValue != null))                                        {                                                this._MessageType.Entity = null;                                                previousValue.Messages.Remove(this);                                        }                                        this._MessageType.Entity = value;                                        if ((value != null))                                        {                                                value.Messages.Add(this);                                                this._MessageTypeId = value.Id;                                        }                                        else                                        {                                                this._MessageTypeId = default(int);                                        }                                        this.SendPropertyChanged("MessageType");                                }                        }                }                                public event PropertyChangingEventHandler PropertyChanging;                                public event PropertyChangedEventHandler PropertyChanged;                                protected virtual void SendPropertyChanging()                {                        if ((this.PropertyChanging != null))                        {                                this.PropertyChanging(this, emptyChangingEventArgs);                        }                }                                protected virtual void SendPropertyChanged(String propertyName)                {                        if ((this.PropertyChanged != null))                        {                                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));                        }                }        }                [global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageType")]        public partial class MessageType : INotifyPropertyChanging, INotifyPropertyChanged        {                                private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);                                private int _Id;                                private string _MessageType1;                                private EntitySet<Message> _Messages;                    #region Extensibility Method Definitions    partial void OnLoaded();    partial void OnValidate(System.Data.Linq.ChangeAction action);    partial void OnCreated();    partial void OnIdChanging(int value);    partial void OnIdChanged();    partial void OnMessageType1Changing(string value);    partial void OnMessageType1Changed();    #endregion                                public MessageType()                {                        this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));                        OnCreated();                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]                public int Id                {                        get                        {                                return this._Id;                        }                        set                        {                                if ((this._Id != value))                                {                                        this.OnIdChanging(value);                                        this.SendPropertyChanging();                                        this._Id = value;                                        this.SendPropertyChanged("Id");                                        this.OnIdChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Name="MessageType", Storage="_MessageType1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]                public string MessageType1                {                        get                        {                                return this._MessageType1;                        }                        set                        {                                if ((this._MessageType1 != value))                                {                                        this.OnMessageType1Changing(value);                                        this.SendPropertyChanging();                                        this._MessageType1 = value;                                        this.SendPropertyChanged("MessageType1");                                        this.OnMessageType1Changed();                                }                        }                }                                [global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageType_Message", Storage="_Messages", ThisKey="Id", OtherKey="MessageTypeId")]                public EntitySet<Message> Messages                {                        get                        {                                return this._Messages;                        }                        set                        {                                this._Messages.Assign(value);                        }                }                                public event PropertyChangingEventHandler PropertyChanging;                                public event PropertyChangedEventHandler PropertyChanged;                                protected virtual void SendPropertyChanging()                {                        if ((this.PropertyChanging != null))                        {                                this.PropertyChanging(this, emptyChangingEventArgs);                        }                }                                protected virtual void SendPropertyChanged(String propertyName)                {                        if ((this.PropertyChanged != null))                        {                                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));                        }                }                                private void attach_Messages(Message entity)                {                        this.SendPropertyChanging();                        entity.MessageType = this;                }                                private void detach_Messages(Message entity)                {                        this.SendPropertyChanging();                        entity.MessageType = null;                }        }                [global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Star")]        public partial class Star : INotifyPropertyChanging, INotifyPropertyChanged        {                                private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);                                private int _id;                                private string _Star1;                                private EntitySet<User> _Users;                    #region Extensibility Method Definitions    partial void OnLoaded();    partial void OnValidate(System.Data.Linq.ChangeAction action);    partial void OnCreated();    partial void OnidChanging(int value);    partial void OnidChanged();    partial void OnStar1Changing(string value);    partial void OnStar1Changed();    #endregion                                public Star()                {                        this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));                        OnCreated();                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]                public int id                {                        get                        {                                return this._id;                        }                        set                        {                                if ((this._id != value))                                {                                        this.OnidChanging(value);                                        this.SendPropertyChanging();                                        this._id = value;                                        this.SendPropertyChanged("id");                                        this.OnidChanged();                                }                        }                }                                [global::System.Data.Linq.Mapping.ColumnAttribute(Name="Star", Storage="_Star1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]                public string Star1                {                        get                        {                                return this._Star1;                        }                        set                        {                                if ((this._Star1 != value))                                {                                        this.OnStar1Changing(value);                                        this.SendPropertyChanging();                                        this._Star1 = value;                                        this.SendPropertyChanged("Star1");                                        this.OnStar1Changed();                                }                        }                }                                [global::System.Data.Linq.Mapping.AssociationAttribute(Name="Star_User", Storage="_Users", ThisKey="id", OtherKey="StarId")]                public EntitySet<User> Users                {                        get                        {                                return this._Users;                        }                        set                        {                                this._Users.Assign(value);                        }                }                                public event PropertyChangingEventHandler PropertyChanging;                                public event PropertyChangedEventHandler PropertyChanged;                                protected virtual void SendPropertyChanging()                {                        if ((this.PropertyChanging != null))                        {                                this.PropertyChanging(this, emptyChangingEventArgs);                        }                }                                protected virtual void SendPropertyChanged(String propertyName)                {                        if ((this.PropertyChanged != null))                        {                                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));                        }                }                                private void attach_Users(User entity)                {                        this.SendPropertyChanging();                        entity.Star = this;                }                                private void detach_Users(User entity)                {                        this.SendPropertyChanging();                        entity.Star = null;                }        }}#pragma warning restore 1591