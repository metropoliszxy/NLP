Testing Technical Summary-Functional testing

Black Box Testing:The test designer selects valid and invalid inputs and determines the correct output. There is no knowledge of the test object's internal structure. where to use:1. These tests can be functional or non-functional, though usually functional. 2. This method of test design is applicable to all levels of software testing: unit, integration, functional testing, system and acceptance. 	advatages:1. Easy for tester to understand  2. Performance like an end user 	disvatages1. Implementation is not required to be understand by tester. 2. Without knowing data structures and algorithms. 3. bug may be missed. 				--------------------------------------------------------------------------------------------------------------------------White Box Testing :1. From an internal perspective of the system to design test cases based on internal structure.  2. It requires programming skills to identify all paths through the software.  3. The tester chooses test case inputs to exercise paths through the code and determines the appropriate outputs. While white box testing is applicable at the unit, integration and system levels of the software testing process, it is typically applied to the unit. While it normally tests paths within a unit, it can also test paths between units during integration, and between subsystems during a system level test. 	1. Find bug as early as possible. 	1. Tester must understand implementation fully. 2. Since the tests are based on the actual implementation, if the implementation changes, the tests probably will need to change, too. 	--------------------------------------------------------------------------------------------------------------------------Gray Box Testing :Grey box testing involves having access to internal data structures and algorithms for purposes of designing the test cases, but testing at the user, or black-box level.         This distinction is particularly important when conducting integration testing between two modules of code written by two different developers, where only the interfaces are exposed for test. 	1. A better way to test product compare with white box only or black box only. 	Interface is not accessible always out of module or system. --------------------------------------------------------------------------------------------------------------------------Positive Testing :Test with valid input, test in the way that the software supposed to be. where to use:Positive test can be in unit/integration/system/acceptance testing, function and non-functional test. It is done in the beginning when software is not stable yet. So called “Test to Pass”. 	advantage:Basic and expected behavior can be verified by it.------------------------------------------------------------------------------------------------------------------------- Negative Testing :Test with invalid input, test in the way that the software not supposed to be. Especially error/exception handling.Where to use:Positive test can be in unit/integration/system/acceptance testing, function and non-functional test. Verify the error/exception can be handled correctly. So called “Test to Fail” More negative testing are kick off, software will be more robust. ------------------------------------------------------------------------------------------------------------------------- Boundary Testing:Boundary testing or boundary value analysis, is where test cases are generated using the extremes of the input domain, e.g. maximum, minimum, just inside/outside boundaries, typical values, and error values where to use:Positive test can be in unit/integration/system/acceptance testing, function and non-functional testadvantages:More boundary testing are kick off, software will be more robust.                                                                 