关于XGameEnginee(Web轻量级游戏框架)

笔者在去年的时候完成过一个简陋的web game游戏框架，此框架的一些信息：NIO的理解，请参照： Netty的一些理解，请参照：Netty的高可靠性，可伸缩性，以及效率的确让人着迷，为什么Netty这么快呢？Netty高效的原因：实现了多路Selector用于读和注册，线程数量是cpu*2，reactor都是这么做的，自己处理写事件，这个我在自己框架中也是这么做的，nio的selector处理注册和读，并且也优化了wakeup，Netty中的wakeup也是优化过的，本身一次wakeup对Nio并不大，但是大批量并发的时候就需要进行优化处理了，只有当selector堵塞的时候进行wakeup，或者说需要下次立刻返回的时候wakeup。Netty在开启多路读写的时候，用的是DirectBuffer，并用了SoftReferrence来做缓存优化，减少传输数据的内存移动和GC。还有预测数据算法，这个具体能不能提高有待讨论。并发的控制，基于SEDA的设计理论构建的高效事件模型，真正的异步处理，吞吐量和伸缩性都可以得到保证。nio的实现并不复杂，但想让你的底层通讯，效率，以及可伸缩性和高可靠性做好，还是极具挑战性的。目前有个项目是自己写的nio，但效率比起netty来，小了几个数量级，当然以本人一己之力能做到目前这个情况，还算自己满意，也用到生产环境中了，一个web game，及时性要求很高，一台server，5000人没问题。同时广播消息在10000人以内，当然有些优化是在业务逻辑层面的。当然比起netty的效率来讲还是差了几个数量级。除了高效，Netty在扩展性方面做的不错：丰富的decoder/encoder实现，你可以轻松的继承一个类实现自己的逻辑，例如游戏中，直接继承FiledLengthBaseFrameDecoder即可。自行添加decoder或者encoder，自由的控制事件流向顺序，通过这个，可以实现一些协议加密解密，协议过滤器，统计工具等等提供很多工具类：Timeout的一些实现，还有ChannelBuffers的一些工具，通常情况下，我们为了减少对Netty的依赖，会自己再封装一层，以完全达到脱离Netty的目的，都会再次封装一层ChannelBuffer，这样目的是不要让上层逻辑跟底层通讯有任何关联，降低耦合，当然也在为考虑更换底层通讯而不影响上层逻辑。提供监听底层消息的ChannelFuture，例如发送完消息可以断开连接等等可调控的通讯架构，可以根据业务的吞吐量来调整，Netty的各项参数不只有socket的一些设置，还能控制事件流顺序和吞吐量的大小等等。最后，基于Netty我简单封装了一个web game所具备的一些GameBuffer，目前比较简陋，后续可能加入一些别的功能。项目在:—————————-分割线—————————–本人这个项目与去年12年6月份到10月份之间开发和使用，当时在做一个棋牌平台，并应用了该项目，由于一些其他原因，该项目未能大规模实验，但本人做了一些测试：性能测试，本人当时压过500人不间断发送消息，业务逻辑完全驱动，此项目如果纯只是发送消息的话，本人电脑上每秒大概单线程在1万条消息以上，因为是棋牌游戏，及时性要求不高，况且当时只是单线程跑的情况下能达到1万条消息已经算是能满足需求。由于是棋牌游戏，所以多核是很容易分配的，直接按照分房间即可实现多核计算，保守估计10000人同时在线很轻松。逻辑开发，在开发XGameEnginee的时候碰见过一些常见的问题，协议加密解密，广播协议加解密等等，数据格式的校验啊，以及资源释放顺序等等。关于测试方法的研究，本人对长连接的游戏一直没有太好的办法来进行测试。下面也是我要说的。在这个简单的开源框架中，本人现在看来做了一些很没有必要的工作——构造协议类型。GameBuffer这个东西固定了你的协议体就是什么样子的，现在看来是对框架的一种强侵入，很没有意义，只为了那丁点的内存复制性能丧失了本该灵活的框架。一个游戏服务器本应该提供很多系统功能：消息的推送，消息的广播(Channel).玩家的查找和定位.服务器之间的通讯.一些系统级的服务,定时器,触发器GM操作工具(玩家下线,玩家推送消息)系统启动日志和调试日志数据的统一日志最后我想说的是，游戏服务器的调试，对于长连接的服务器来讲，那真的是很麻烦。 所以我的看法是，采用长短结合的方式进行服务器开发更有益于发现问题和找到问题。笔者最近采用Nginx+Lua的模式，此模式开发极易上手，而且调试及其方便，后端挂在Redis，Redis从2.6开始支持Lua，可以说让只是远端数据结构的存储变成了一个真正意义上的，能计算的数据库。为什么说Redis支持Lua了如此之重要？因为Nginx+Lua只能算是一层前端的驱动，有了Redis这个单进程单队列完全能保证数据的唯一性，大部分市面上的短链接Web Game或者手机游戏基本上都可以采用这种模式进行开发，此模式开发的劣势和优势:优势:上手快，开发速度快，稍微有点编程经验的，培训1星期就能上手写东西。测试和调试方便和快速，很容易做性能测试，以及编写测试脚本，我目前采用lua+curl的方式构建测试脚本。前端无关性，前端可以使用php或者java，ruby等等，任何你想到的语言，只是用于调用后端redis脚本。劣势:逻辑全部基本都在Redis这个层面上，在调试的时候不太方便，只能是写一点调试一点。你每台Server承载的人数可能有限，因为至完全依赖于Redis所能承载的极限。不适合及时性要求较高的游戏，本身就是短链接。这种模式目前开发起来，我个人感觉很轻量，并且问题很容易定位，开发效率还是要高很多，如果长连接需要聊天的服务器，单独出来，包括向前端推送消息。开发游戏服务器，更多的不需要OO，而是需要DSL，lua这门语言的简洁，以及强大的表现能力很适合做后端开发，尤其对table的支持让这么语言可以迈进半个FP领域了。最后，本人开始研究厄兰了，因为对FP的热爱，再一看到厄兰的时候就倍感亲切，也许这个领域还有很多可以挖掘的宝藏在等着我们。为了能更好的迭代，更快速地迭代，增强移交能力，缩短迭代周期，提供更可靠，更高效的游戏服务器，我们只能继续寻找最优秀的做法，没有最优秀，只有最合适的！