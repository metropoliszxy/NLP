android知识拾遗——1

1.获取mac地址Java代码  收藏代码   1. 1、<uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>       2. 2、private String getLocalMacAddress() {     3.     WifiManager wifi = (WifiManager) getSystemService(Context.WIFI_SERVICE);     4.     WifiInfo info = wifi.getConnectionInfo();     5.     return info.getMacAddress();     6.   }   2.全屏一是在代码中设置，另一种方法是在配置文件里改！一、在代码中设置:Java代码  收藏代码   1. public void onCreate(Bundle savedInstanceState) {      2.     super.onCreate(savedInstanceState);      3.     //无title        4.     requestWindowFeature(Window.FEATURE_NO_TITLE);        5.     //全屏        6.     getWindow().setFlags(WindowManager.LayoutParams. FLAG_FULLSCREEN ,          7.         WindowManager.LayoutParams. FLAG_FULLSCREEN);               8.     setContentView(R.layout.main);      9.     }     10. }    设置全屏的俩段代码必须在setContentView(R.layout.main) 之前，不然会报错。二、在配置文件里修改(android:theme="@android:style/Theme.NoTitleBar.Fullscreen"): 3、网络状态Java代码  收藏代码   1. <uses-permission     2.     android:name="android.permission.ACCESS_NETWORK_STATE" />     3.      4.  private boolean getNetWorkStatus() {     5.      6.    boolean netSataus = false;     7.    ConnectivityManager cwjManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);     8.      9.    cwjManager.getActiveNetworkInfo();    10.     11.    if (cwjManager.getActiveNetworkInfo() != null) {    12.    netSataus = cwjManager.getActiveNetworkInfo().isAvailable();    13.    }    14.     15.    if (!netSataus) {    16.    Builder b = new AlertDialog.Builder(this).setTitle("没有可用的网络")    17.    .setMessage("是否对网络进行设置？");    18.    b.setPositiveButton("是", new DialogInterface.OnClickListener() {    19.    public void onClick(DialogInterface dialog, int whichButton) {    20.    Intent mIntent = new Intent("/");    21.    ComponentName comp = new ComponentName(    22.    "com.android.settings",    23.    "com.android.settings.WirelessSettings");    24.    mIntent.setComponent(comp);    25.    mIntent.setAction("android.intent.action.VIEW");    26.    startActivityForResult(mIntent,0);     27.    }    28.    }).setNeutralButton("否", new DialogInterface.OnClickListener() {    29.    public void onClick(DialogInterface dialog, int whichButton) {    30.    dialog.cancel();    31.    }    32.    }).show();    33.    }    34.     35.    return netSataus;    36.    }  4 .判断GPS状态Java代码  收藏代码   1. public boolean isGpsEnabled(Context context)     2. {     3.     LocationManager locationManager =((LocationManager)context.getSystemService(Context.LOCATION_SERVICE));     4.     List<String> accessibleProviders = locationManager.getProviders(true);     5.     return accessibleProviders != null && accessibleProviders.size() > 0;     6. }   5.禁止横屏幕 setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_NOSENSOR); 6.禁用重复加载    1. 修改AndroidManifest.xml文件，在activity标签下面增加参数：Java代码  收藏代码   1. < activity android:name="MyActivity"     2. android:configChanges="orientation|keyboardHidden">  < activity android:name="MyActivity"android:configChanges="orientation|keyboardHidden">    2.在MyActivity 中重载onConfigurationChanged（每次切屏的时候会自动调用）方法，初始化横竖屏方向不同的显示界面，以及其他数据的初始化操作：Java代码  收藏代码   1. @Override     2.      3. public void onConfigurationChanged(Configuration newConfig) {     4.      5.    super.onConfigurationChanged(newConfig);     6.      7. if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {     8.            //加入横屏要处理的代码     9.     10. }else if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {    11.     12.            //加入竖屏要处理的代码    13.     14. }    15.     16.     17. }   7、开机启动程序Java代码  收藏代码   1. 1)public class StartupReceiver extends BroadcastReceiver {     2.      3.   @Override     4.   public void onReceive(Context context, Intent intent) {     5.     Intent startupintent = new Intent(context,StrongTracks.class);     6.     startupintent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);     7.     context.startActivity(startupintent);     8.   }     9.     10. }    11. 2)<receiver    12. android:name=".StartupReceiver">    13. <intent-filter>    14.     <!-- 系统启动完成后会调用 -->    15.     <action    16.         android:name="android.intent.action.BOOT_COMPLETED">    17.     </action>    18. </intent-filter>    19. </receiver>   