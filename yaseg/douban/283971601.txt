The Problem of Universal Realization

The Problem of Universal RealizationAbstract: Some philosophers have shown that the traditional understanding of computation will trigger the problem of universal realization, which means almost every physical thing can be seen as a digital computer. This problem makes the computation thesis become trivial. Even worse, if universal realization stands, then computing is a relative property. This can be a challenge to the foundation of cognitive science. Rather than some people who claim that the universal realization is not so unacceptable, in this paper, I’ m arguing that such a problem is intolerable. Thus, if the computational theory is a feasible understanding of human mind, the notion of computation should be well-defined to avoid the problem of universal realization. And at last I will discuss some promising approaches to add constraints to the traditional definition, which may meet the condition that not everything computes. 1. The Traditional Definition of ComputationWhat is computation? And what thing can be counted as computational system? These questions are fundamental to computer science as well as cognitive science. For now, many insights in the field of cognitive science directly come from the analogy that “the brain is a digital computer” and that “the mind is a computational program”. The computational theory of mind (CTM for short) is now the most promising way to understand the human mind.To answer the problem above, we’d better look back at the dawn of computer science. At the beginning of the 20th century, logicians found out that human reasoning such as mathematical calculations and logical judgments can be formalized in a successful way. That gives us a blueprint to reduce the process of reasoning into simple rules and steps regardless of the meaning or semantics. Based on the development of modern logics, Allan Turing, a genius mathematician, further imagined an abstract machine that can realize human reasoning in a mechanistic way.  Since reasoning can be transformed into syntactic process and discomposed into simple steps through formalization. This device, which now is called Turing machine, though constructed simply, can in principle accomplish various kinds of reasoning tasks just by following instructions. The importance of this imagined machine cannot be overstated, for it gives us hope to realize human intelligence with solely physical things.So what is a Turing machine? A Turing machine is actually a finite states automaton, which means its behaviors can be totally described by a machine table consisting of transitions of states. And if the working process of Turing Machine is the standard computational process, then the computational process can be defined as finite states transition in a certain way.2. A Problem Resulted from the Traditional DefinitionAs it is shown above, the definition of computation is simple and liberal. And it may be too liberal that every physical thing can be counted as a computational system. John Searle once argued that the wall behind his back was implementing the WordStar program (Searle 1992).To see why such a problem occurs, we should specify the traditional definition. According to that definition, the locus of computation is finite states transition in a certain way. A program or computational process is equivalent to the machine table consisted of states transitions. Therefore, for a physical system to implement a program, it just requires that the system has enough physical states or subsets of physical states, which correspond to the computational states described in the machine table respectively. But why does a physical state correspond to a computational state? Does a physical state correspond to a computational state per se? The answer is probably negative. We usually employ the number 0 and I to describe the process of digital computer. But as Searle suggested, what would happen if we look into the computer? Can we find any 0s or 1s? The answer is not. What we really find is just two stable physical states of semi-conductors. And what we really do is to attribute the computational meanings of 0 and 1 to those two physical states. But there is no principle making those two physical states always match the 0s and 1s. As a consequence, it seems that the computer is not by itself has the computational states. It is computing because we choose some physical states of the system as computational states. And the point is, we can choose any physical states of any physical thing to correspond to the computational states as we like.Based on the discussion above, we can now conclude that, for every physical object or system, if it is complex enough (it has enough states to match the computational states), then there must be an interpretation, under which, the object is a digital computer and it is implementing a program. This result is quite counter-intuitive. In common sense, we all think the computing things like digital computers or human brains must be different from other physical beings. The computing things must have some special features that make them compute. But now, according to the traditional definition of computation, every physical being, even the wall behind my back, is a digital computer! A similar but more rigorous argument is provided by Hilary Putnam. In the appendix to Representation and Reality, Putnam tries to prove the theorem that ‘every physical system implements every finite automaton’ (Putnam 1988). I will give an outline of his argument below.Suppose there is a finite states automaton which has only two states. And its table can be described as a sequence of states: ABABABA. Now we can pick up a random physical object which can be counted as a dynamic system. That means the object’s physical state is changing continuously through time. Then, we can slice the continuous changing process into discrete parts and make the physical states at certain moments stand for stable states. For instance, there is a period of time from 12:00 to 12:07. We can take the physical states at 12:01, 12:02… 12:07 as s1, s2… s7. Now define thatA=s1 V s3 V s5 V S7; B=s2 V s4 V s6. Deploying this definition, we now have an exactly mapping from the physical states of the object we pick up to the computational states of the finite states automaton. And according to the traditional definition of computation, the physical object is implementing the finite states automaton. Hurray, we have made an arbitrary object transform into a digital computer!Putnam adds that though the finite states automaton mentioned above has no input and output states, which makes it far from the standard model in cognitive science. But he still claims that it is not a big trouble. For we can pick up any physical systems that have input-output isomorphic to the finite automaton, and then those physical systems will implement the computational program.3. Biting the BulletTo see why universal realization troubles the cognitive science, one needs to remember that the computation-representation model is the foundation to standard cognitive science. It is just like a paradigm that everyone doing cognitive science should view our cognition as computational process. And at least one aim of the cognitive science is to find the details, the hidden algorithm of the computational processes. If the universal realization is true, then the claim that our cognition is computational process becomes trivially true. For every kind of process can be taken to be computational. Then the computation-representation cannot give us any real direction in cognitive science.What’s more, as Searle has pointed out, the problem of universal realization is due to the irrelevance between physical structure and syntax (Searle 1992). It means whether a physical thing is implementing a program depends on the way it is interpreted. To put it in another way, computing is not an intrinsic but relative property. And Searle argues that only intrinsic property can be discovered and investigate by natural science. Thus, if cognition is computation, and computing is a relative property, then cognition cannot be studied by natural science. In a word, employing the computation-representation model, either cognitive science is not a natural science, or cognitive scientists don’t have any object to study!Considering the nature of natural science, Sealer thinks that the problem of universal realization is a real threat to cognitive science. But there are still some people who find this problem is not so unpalatable as Sealer claims. And James Blackmon is one among those who want to bite the bullet.         Inspired by the idea of relative motion in physics, Blackmon holds that cognitive science can still be natural science even though we accept that computation is relative to interpretation (Blackmon 2012). In the Aristotle’s world, all the objects are either moving or at rest. So motion in Aristotle’s physics is an absolute concept. By contrast, in the Galileo’s world, every object is moving or at rest relative to a certain reference frame. Blackmon states that with different mapping ways, we can view a system as implementing different programs. We are selecting different mappings for computation just like we are selecting different reference frames for motion.Thinking in this way, it may seem that the relativity of computation is not so terrible. Although motion, which is a concept essential to physics, is relative, it doesn’t make physics into non-science. Analogously, although computation is relative, it perhaps doesn’t make cognitive science into non-science either.Arguing in this way, Blackmon seems to find some similarities between motion and computation. There is some frame references that are special and useful. For example, it is convenient to select the earth as frame reference to describe the objects’ motion on the ground. Similarly, we select the mapping that is of great pragmatic value to interpret a computational process. Blackmon admits that according to some mapping, the wall behind my back is implanting a program. But this kind of interpretation is no use for empirical research. Blackmon thinks there is a special kind of mappings that should be cared about by scientists. And none of those mapping can be applied to the wall behind my back for the wall doesn’t have the specific physical structure. Therefore, even the wall is implementing a program, it is not computing in the way that scientists will be interested in.In the next section, I will give my own argument to support Sealer’s idea that universal realization and relativity of computation is a real threat to computaionalism, though I will argue in a different way from him. And I think we should add new constrains to the traditional definition of computation. Actually, I think this approach can reconcile with Blackmon’s in some sense.4. The Independence of MindIn this section, I am going to construct my own arguments to show that the result of relativity of computation is intolerable. Ipso facto, to rescue the computational theory of mind, we must give new constraints to the old definition.In the discussion above, I have shown that how the traditional definition of computation leads to universal realization and the relativity of computation. What I’m thinking is that the relativity of computation contradicts to one important feature of human mind. That is, the existence of mind is independent on any interpretation. I call this the independence of mind thesis. Here is my argument.(1) The traditional definition of computation will lead to the relativity of computation. (That is, whether a system is computing depends on the way we select to map the physical system to the computational system.)(2) The computational theory of mind is feasible. (3) Having a computational process is necessary to have a mind. [From (2)](4) Whether one has a mind depends on the interpretation used to describe the cognitive process. [From (1) and (3)](5) The independence of mind thesis. (That is, if one has a mind, then one has a mind regardless of what interpretation is used to describe cognitive process)(6) The (4) and the (5) are inconsistent.Therefore, if we accept the computational theory of mind and the independence of mind thesis, then we can conclude that the old definition of computation is wanting. Someone may doubts that why we should accept the independence of mind thesis. Here I’m going to say something more on that thesis.The reason for accepting the independence thesis of mind is simple. That is, mental states have intentionality. According to Franz Brentano, it is intentionality that distinguishes mental things from physical things. Some may reject that even physical things can have intentionality. Of course, the words that I am now typing have semantics so they must have intentionality. They have intentionality because we ascribe meanings to them. In this way, intentionality seems to be compatible with the relativity of computation. But as many philosophers have pointed out, there are two kinds of intentionality, the original one and the derived one. And only mental things can get the intentionality in the original or intrinsic sense. It is the original intentionality that is incompatible with the relativity of computation.Philosophers like Dennett may reject that mind have original intentionality. According to Dennett, people have intentionality only from the intentional stance. If Dennett is right, then my argument collapses. Since I never read his Intentional Stance, here I just ignore this possible challenge. (Quite a shame!)If my argument works, then the notion of computation must be revised to salvage the computational theory of mind. Since how to revise the definition is not the job of this paper, I’m just going to introduce some approaches which are promising from my own point.5. Giving a New Account of ComputationOne constraint required by the old definition is that the transition between states must obey some causal laws. And the prominent understanding of causal law is the counter factual understanding. That is to say, if the states transition obeys causal law, it must meet the counter factual condition. Adding this constrain, we can no longer use Putnam’s method to ascribe computational states to physical states ex post facto.But even adding this constraint, there are still too many physical things computing (Chalmers 1996). So some more constraints should be added. And the right way to go is to consider the physical structure and the mechanistic process of those standard computational systems. For according to the old account, computation is irrelevant to the physical and the mechanistic property of the system. So if we add more constraints on the mechanistic property of a system, then we can exclude many systems with simple structure to be computational system. Actually many philosophers like Chalmers, Godfrey and Piccinini are working in this direction.In the passage above, I have introduced Blackmon’s way to accommodate the relativity of computation. According to Blackmon, there are some special kinds of mapping which is useful and fruitful for cognitive science. In my view, finding such special kinds of mapping is another expression of giving a more constrained account of computation. I think Blackmon’s approach can reconcile with mine in some sense. For both Blackmon and I agree that the wall’s implementing a program is quite different from a real computer’s implementing a program due to the physical and mechanistic factors. So, in my word, our task now is to find a more rigorous definition for computation. And in Blackmon’s, the task it to find a more appropriate ‘reference frame’. However, as I have argued, treating the computation as a relative concept will contradict to one important feature of mind. That is mind have original intentionality. So I cannot see no reason for Blackmon to insist the relativity of computation.ConclusionI agree with Putnam and Searle that the traditional definition of computation will lead to the problem of universal realization. And as I have argued, this result is intolerable. If we accept that computational theory is the right theory to understand human mind, then we must have a more rigorous definition for computation. Although this task has not been accomplished, we have already had some promising approaches.  Bibliography:Blackmon, James, 2012, “Searle’s Wall”, Erkenntnis.Blackmon, James, 2013, “On the Relativity of Computation” (forth coming or unpublished draft? Not sure).Chalmers, D. J., 1996, “Does a Rock Implement Every Finite-State Automaton?” Synthese, 108: 310-333.Horst, Steven, "The Computational Theory of Mind", The Stanford Encyclopedia of Philosophy (Spring 2011 Edition), Edward N. Zalta (ed.), URL = <>.Piccinini, Gualtiero, "Computation in Physical Systems", The Stanford Encyclopedia of Philosophy (Fall 2012 Edition), Edward N. Zalta (ed.), URL = <>.Putnam, H., 1988, Representation and Reality, Cambridge, MA: MIT Press.Searle, J. R., 1992, The Rediscovery of the Mind, Cambridge, MA: MIT Press.