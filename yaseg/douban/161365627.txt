对Scala Continuations的连蒙带猜

解毒：        两个原语reset, shift. 需要编译插件支持.        reset 定义continuations边界（干吗的？）        shift 之后的代码转换为一个Continuation函数，函数类型根据后续表达式推断        同时将此函数传入shift函数体执行        有代码求真相：        $ scala -P:continuations:enable        $ scala> import scala.util.continuations._        $ scala> reset { shift { k : (Int=> Int) => k(8) } + 1 }        res0: Int = 9        $ scala>         reset{                 println(1)                shift { k : (Unit=> Unit) =>                         k()                        println(2)                }                 println(3)         }        1        3        2连蒙带猜：        reset { shift { k : (Int=> Int) => k(8) } + 1 }        相当于:        val func = (k: (Int=>Int)) => k(8)        val c : (Int =>Int) = (x: Int) => 1 + x                 //插件干的好事！        def myshift(fun : (Int => Int) => Int) = fun(c)   //插件干的好事！？        myshift(func) (脑袋有点晕。。。。。。。。。。。, 核桃吃少了。。。 求人洗脑!!!更多资料：