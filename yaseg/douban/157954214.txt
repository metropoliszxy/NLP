Scala 匿名类、构造块Tips及在JavaFx 2的应用

先看代码scala> class A{     | private var _name:String = _     | def name_=(name:String) = _name = name     | def name = _name     | }defined class Ascala> new A{     |      | }res0: A = $anon$1@14487c8scala> val a = new A { name = "Hello" }a: A = $anon$1@1e85928scala> a.nameres1: String = Helloscala> val a = new A { _name = "Hello" } <console>:8: error: variable _name in class A cannot be accessed in A        val a = new A { _name = "Hello" }scala> class B { protected var _name:String = _ }defined class Bscala> new B{_name ="ss"}res2: B = $anon$1@1d9e895解释 new A { ... } 创建匿名类。是A的子类，并实例化 { } 部分里的代码（我称之为构造块）scala会将其放入构造方法里 1 如此可以解释在匿名类构造块里是访问不了父类的private成员变量， 所以new A { _name = "Hello" } 报错 2 而new A { name = "Hello" }， 是调用了"name_="这个public方法（Scala语法糖，换个马甲，还得认识啊） 3 在B类里将_name 定义为protected， 子类就可以访问了。所以new B{_name ="ss"} 没问题特性应用JavaFx 2可以如此使用Scala DSLsobject HelloJavaFx extends JavaFXApplication {  def stage = new Stage {    title = "Hello Stage"    width = 600    height =450    scene = new Scene {        fill = Color.LIGHTGREEN        content = List(new Rectangle {          x = 25          y = 40          width = 100          height = 50          fill = Color.RED        })    }  }}